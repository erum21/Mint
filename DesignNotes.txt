TODO next:
  'expectedType' in evaluator.
  -- add EnumType, and let options support enums.
  -- Get rid of GraphBuilder.
  -- Think about scanners
    -- when do they run?
    -- how to parse the output
  -- need a better syntax for combining arg lists. Varargs functions would help.
  -- required options.
  -- sort command-line options in help

Some more thoughts on gendeps:
  what we want is a dependency graph that looks like this:
    [object files in directory build(X)] -> generated deps file -> [source files in X]
  In other words, there's some build artifact that exists for each directory which has
    source files in it.
  A build rule wants to create an implicit dependency on this hypothetical deps object.
    so something like compose_unique(key, [protos]), where only one copy of the object is
    created for each unique value of 'key'.

TODO later:
  -- serialize configuration graph.
  -- load configuration graph.
  -- Trim leading space from multi-line string literals.
  -- String escaping.
  
We also need platform-specific file suffixes. (.o vs. .obj)

# Select either msvc or gcc based on the current host
compilers:cplusplus = cond(host == "WIN32" compilers:msvc compilers:gcc)

/////

class Value {
  Type * type;
  union {
    Node * n;
    bool b;
    int i;
    double d;
  }
}
